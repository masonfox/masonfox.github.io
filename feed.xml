<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mason Fox</title>
    <atom:link href="http://masonfox.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <link>http://masonfox.github.io/</link>
    <description>An Independent Study of Javascript, jQuery, and PHP</description>
    <pubDate>Sun, 16 Aug 2015 17:54:16 -0400</pubDate>
    
      <item>
        <title>Yeoman</title>
        <link>http://masonfox.github.io/2015/08/16/Yeoman.html</link>
        <guid isPermaLink="true">http://masonfox.github.io/2015/08/16/Yeoman.html</guid>
        <description>&lt;p&gt;A web application generator for any project! Kicks the bore and time-wasted setup out of each new web project!&lt;/p&gt;

&lt;h3 id=&quot;what-is-yeoman&quot;&gt;What is Yeoman?&lt;/h3&gt;
&lt;p&gt;Yeoman is a scaffolding tool that strives to increase productivity whilst standardizing best practices when creating new web applications. Combining other js libraries, scripts, package managers and more, Yeoman compiles a custom directory for nearly any application, as long as there is a Yeoman generator for it. You might be asking yourself, “Why is this important/even matter?”. Well, simply put, running Yeoman saves you a monumental amount of time when setting up a project and it also helps emphasize the importance of standardizing best practices by providing you exactly what you need and none more. It will install all of the dependencies for you, link them, create your directories, setup a task runner (this alone is a large time saver), and much more. The rest of this post will contain information about how to install and use Yeoman on your next project! (This is a Mac only tutorial)&lt;/p&gt;

&lt;h3 id=&quot;yeoman-workflow&quot;&gt;Yeoman Workflow&lt;/h3&gt;
&lt;p&gt;With Yeoman, we are able to automatically create our application directory by running Yeoman. This puts us in a wonderful place as we have just created a basic, yet very powerful workflow for ourselves. The Yeoman workflow typically consists of multiple applications, such as Bower, a package manager, as well as task runners such as Grunt or Gulp js, which take care of repetitious tasks when writing code, such as compiling preprocessors, automatically browser refreshing, uglifying/minifying HTML &amp;amp; CSS, Javascript, and more. A typical workflow that Yeoman will set you up with will look like this:&lt;/p&gt;

&lt;div class=&quot;short-pad&quot;&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;img/yeoman/yo-workflow.png&quot; alt=&quot;Yo-Workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Depending on the creator of the generator, some users may prefer to use Grunt over gulp, or vice-versa, it is typically a personal preference. I am personally a fan of Gulp, but Grunt will essentially run the same.&lt;/p&gt;

&lt;h3 id=&quot;how-do-i-install-yeoman&quot;&gt;How do I install Yeoman?&lt;/h3&gt;
&lt;p&gt;Before downloading and running Yeoman, you will need to download and install
&lt;a href=&quot;https://nodejs.org/&quot; target=&quot;_blank&quot;&gt;Node js&lt;/a&gt;, which includes the Node Package Manager (npm). This will manage your local packages through Node. You can download the Node package and install it through a friendly UI.&lt;/p&gt;

&lt;h4 id=&quot;yeoman--generator-install&quot;&gt;Yeoman &amp;amp; Generator Install&lt;/h4&gt;
&lt;p&gt;After we have installed Node, we can now run this command in our terminal:&lt;/p&gt;

&lt;div class=&quot;codeblock&quot;&gt;
  npm install -g yo
&lt;/div&gt;
&lt;div class=&quot;short-pad&quot;&gt;&lt;/div&gt;

&lt;p&gt;Now that we have Yeoman installed globally on our local computer, we can’t really run it yet, we need generators to do the heavy lifting!&lt;/p&gt;

&lt;p&gt;Generators are plugins that build a custom webapp directory for the user through a series of questions, informational requests and more. They will need to be installed outside of Yeoman. This can be accomplished via the
&lt;a href=&quot;http://yeoman.io/generators/&quot; target=&quot;_blank&quot;&gt;Yeoman Website&lt;/a&gt; by browsing the available generators and then installing them on the command line with reference to the generators Github readme.&lt;/p&gt;

&lt;p&gt;Some generators include:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://github.com/yeoman/generator-angular&quot; target=&quot;_blank&quot;&gt;Angular&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://github.com/yeoman/generator-webapp&quot; target=&quot;_blank&quot;&gt;Webapp (The basic webapp)&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://github.com/yeoman/generator-gulp-webapp&quot; target=&quot;_blank&quot;&gt;Gulp&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://github.com/robwierzbowski/generator-jekyllrb&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;https://github.com/wesleytodd/YeoPress&quot; target=&quot;_blank&quot;&gt;Wordpress&lt;/a&gt;&lt;br /&gt;
  &lt;a href=&quot;http://yeoman.io/generators/&quot; target=&quot;_blank&quot;&gt;and many more…&lt;/a&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;how-do-i-run-yeoman&quot;&gt;How do I run Yeoman?&lt;/h3&gt;
&lt;p&gt;Running Yeoman is fairly simple, even for those who are terrified of the terminal (I was like that once, it’s okay, really).&lt;/p&gt;

&lt;p&gt;First, we want to make a directory to hold all of our generated files. We can do this by running:&lt;/p&gt;

&lt;div class=&quot;codeblock&quot;&gt;
  &amp;gt;_ mkdir yo
&lt;/div&gt;
&lt;div class=&quot;short-pad&quot;&gt;&lt;/div&gt;

&lt;p&gt;Now that we have created it, we need to move into this directory before running Yeoman by running:&lt;/p&gt;

&lt;div class=&quot;codeblock&quot;&gt;
  &amp;gt;_ cd yo
&lt;/div&gt;
&lt;div class=&quot;short-pad&quot;&gt;&lt;/div&gt;

&lt;p&gt;To execute Yeoman all we need to run is a two letter word: “yo”. It will look like this:&lt;/p&gt;

&lt;div class=&quot;codeblock&quot;&gt;
  &amp;gt;_ yo
&lt;/div&gt;
&lt;div class=&quot;short-pad&quot;&gt;&lt;/div&gt;

&lt;p&gt;It will return us this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;img/yeoman/yo-run.png&quot; alt=&quot;Yo-Terminal&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;short-pad&quot;&gt;&lt;/div&gt;
&lt;p&gt;At this point, we are able to select our generator, which will provide the framework for the desired application. I selected the webapp generator, but you may select any of your installed generators.&lt;/p&gt;

&lt;p&gt;Upon execution, Yeoman will prompt you with a series of questions to help you setup your project. Questions may relate to a CSS framework choice like Foundation or Bootstrap, using Compass and SASS together, etc. Navigate your way through the prompts and let Yeoman build on.&lt;/p&gt;
&lt;div class=&quot;short-pad&quot;&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;img/yeoman/yo-webrun.png&quot; alt=&quot;Yo-Terminal&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;short-pad&quot;&gt;&lt;/div&gt;
&lt;p&gt;After Yeoman has finished generating your directory, head over to your “yo” directory that houses your generated webapp. You can see that all of the your necessary files have been created for you! Congrats! You just ran Yeoman! Yeah, I know, pretty easy right?!&lt;/p&gt;

&lt;p&gt;When it comes to selecting the Grunt or Gulp commands, check the generator repository from which you installed it from. The majority of them will house the task runner information in the readme.&lt;/p&gt;

&lt;p&gt;If you haven’t already, check out Yeoman by using the link below and stop wasting your time setting up your next project, let Yeoman take care of it! He’s pretty good at it! :)&lt;/p&gt;

&lt;!-- End --&gt;
&lt;div style=&quot;margin: 0 35% 0 35%; padding-top: 1em; min-height: 12em; max-width: 12em;&quot;&gt;
  &lt;a href=&quot;http://yeoman.io/&quot; target=&quot;_blank&quot;&gt;&lt;img src=&quot;/img/yeoman/yeoman-end.png&quot; /&gt;&lt;/a&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 16 Aug 2015 00:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>Codepen Playground</title>
        <link>http://masonfox.github.io/2015/08/15/Codepen-Playground.html</link>
        <guid isPermaLink="true">http://masonfox.github.io/2015/08/15/Codepen-Playground.html</guid>
        <description>&lt;p&gt;Codepen, the front end playground for designers and developers. Demo, or it didn’t happen!&lt;/p&gt;

&lt;h3 id=&quot;what-is-codepen&quot;&gt;What is Codepen?&lt;/h3&gt;

&lt;p&gt;Codepen is an in browser IDE (Integrated Desktop Environment) or online text-editor for short. Just as we develop our code in our respective desktop environments, Codepen allows users to write front end code, process it instantly, and share it with other front-end designers/developers. One of the most interesting aspects of Codepen is the ability to write Javascript, which if you are familiar is a large large large (10x) no no for websites. If a visitor is able to write arbitrary code, such as a Javascript alert(“Hello”), this tells the visitor/potential hacker that they have the ability to execute Javascript on the website. This is a huge deal as it can lead to the acquisition of cookies, which we all know is a disastrous security issue. Codepen prevents this security threat by stripping away potentially dangerous executable code when live updating the code, pretty ingenious.&lt;/p&gt;

&lt;p&gt;Other than being able to write HTML, CSS, and Javascript, Codepen allows users to extend their productivity with the addition of not only CSS preprocessors, such as LESS, SASS, Stylus, SCSS, and PostCSS, but also HTML preprocessors! This includes the traditionally loved HAML, as well as Slim, and Jade. I have embedded one of my basic pens that illustrates a css rotation animation. The written with the Slim and SCSS preprocessors. You can view the compiled code by selecting this option when tabbing through the Slim and SCSS.&lt;/p&gt;

&lt;p&gt;A sample pen:&lt;/p&gt;

&lt;!-- Begin Pen --&gt;
&lt;p data-height=&quot;290&quot; data-theme-id=&quot;0&quot; data-slug-hash=&quot;XbQqWY&quot; data-default-tab=&quot;result&quot; data-user=&quot;masonfox&quot; class=&quot;codepen&quot;&gt;See the Pen &lt;a href=&quot;http://codepen.io/masonfox/pen/XbQqWY/&quot;&gt;Spinning Circle&lt;/a&gt; by Mason Fox (&lt;a href=&quot;http://codepen.io/masonfox&quot;&gt;@masonfox&lt;/a&gt;) on &lt;a href=&quot;http://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async=&quot;&quot; src=&quot;//assets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;!-- End Pen --&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Codepen also includes other small features such as extending styling possibilities by adding external stylesheets from web sources, such as Bootstrap, jQuery, and many more. Codepen will also take care of vendor prefixing with autoprefixer as well.&lt;/p&gt;

&lt;h3 id=&quot;social-ideology&quot;&gt;Social Ideology&lt;/h3&gt;
&lt;p&gt;The online editor includes social aspects by letting others view, heart (essentially liking), comment, and even fork your pen to edit and play with themselves. Codepen also displays the most popular pens each day, which typically showcases revolutionary CSS and Javascript implementation.&lt;/p&gt;

&lt;h3 id=&quot;features-of-codepen&quot;&gt;Features of Codepen&lt;/h3&gt;

&lt;h4 id=&quot;general-features&quot;&gt;General Features&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Online Code Editor that syncs changes automatically&lt;/li&gt;
  &lt;li&gt;Embed Pens on websites (Uses data, not iFrame)&lt;/li&gt;
  &lt;li&gt;Public pens – Open for all users to see, edit, and fork&lt;/li&gt;
  &lt;li&gt;Personal Blog – Holds all pens and posts&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;pro-features&quot;&gt;Pro Features&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;Private Pens – Pens only you can edit and see&lt;/li&gt;
  &lt;li&gt;Teacher Mode – Allows one user to write code, such as teacher, and others to watch changes, but not edit, typically for students&lt;/li&gt;
  &lt;li&gt;Change the style of pen embeds&lt;/li&gt;
  &lt;li&gt;Asset hosting – Host assets, such as images, css, javascript, and more&lt;/li&gt;
  &lt;li&gt;Collaborative Code Editing – Collaborative live code editing amongst two users, more on a super pro account&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Definitely go and give Codepen a go! It is a wonderful asset for making short demos of code and sharing them with other people.&lt;/p&gt;

&lt;div style=&quot;margin-left:40%; padding-top: 1em;&quot;&gt;
  &lt;a href=&quot;http://codepen.io/&quot;&gt;&lt;i class=&quot;fa fa-codepen&quot; style=&quot;font-size: 3em;&quot;&gt;&lt;/i&gt;&lt;/a&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 15 Aug 2015 00:00:00 -0400</pubDate>
      </item>
    
      <item>
        <title>Jekyll</title>
        <link>http://masonfox.github.io/2015/07/21/Jekyll.html</link>
        <guid isPermaLink="true">http://masonfox.github.io/2015/07/21/Jekyll.html</guid>
        <description>&lt;p&gt;I guess this marks my first “real” post! To start this off, I’d love to talk about Jekyll, something I have become very passionate about within the past couple of weeks.&lt;/p&gt;

&lt;h3 id=&quot;what-is-jekyll&quot;&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a static site generator built on Ruby and also utilizing liquid templating. Jekyll is not a server side client, but rather a collection of local scripts that compile separate files into a single static directory. It utilizes liquid templating, which allows users to designate if/else statements, declare specific html layouts, add front matter, and more.&lt;/p&gt;

&lt;p&gt;One of the most important concepts of Jekyll is the content and structure separation. As explained briefly earlier, Jekyll keeps the content of the website and the strucutre/layout of the website in separate directories. An example of this would be this blog post. This post is located in the posts directory, which at this moment, is written in markdown. By adding front matter to the top of the post, triggered by three dashes, the user is able to choose a specific layout that coincides with the desired structure of the content. For example, I am writing a post, a Jekyll blog post, so I would note in my front matter in the markdown file In this instance, I would like my layout for this post to be, well, a post! The user is also able to add additional information, such as the time code, the title of the post, and excerpt of the post, an image, and much more! Pages are created in the same exact way, but knowledge of html, css, and liquid templating are required to ensure correct Jekyll builds.&lt;/p&gt;

&lt;h3 id=&quot;pros-of-jekyll&quot;&gt;Pros of Jekyll&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Static sites run faster as there is no database weighing it down. They are solely comprised of html  and their assets.&lt;/li&gt;
  &lt;li&gt;Easy authoring: written in markdown, so the barrier to entry for new users is very low and simple. A blog post ui was also created and can be linked to your Github Repository at &lt;a href=&quot;http://prose.io&quot;&gt;Prose&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Hosted on github pages for free! (This one is)&lt;/li&gt;
  &lt;li&gt;Simple build and deploy: as simple as running jekyll s (for serve to view the site locally) and jekyll b (for build to compile the directory) in the command line.&lt;/li&gt;
  &lt;li&gt;Dynamic capabilities are possible for static pages, such as An example may be Google Forms to send form data, Disquis comment system and more API’s and embeds.&lt;/li&gt;
  &lt;li&gt;Supports many frameworks such as Twitter Bootstrap, Foundation 5, and more.&lt;/li&gt;
  &lt;li&gt;Task runner support, such as Grunt or Gulp or other systems like Codekit.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;cons-of-jekyll&quot;&gt;Cons of Jekyll&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;Not officially supported on Windows as it Jekyll is written in Ruby.&lt;/li&gt;
  &lt;li&gt;Does not have a database, meaning that it may &lt;u&gt;not&lt;/u&gt; be the best solution for every project.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I definitely recommend going and trying out Jekyll. I have linked a couple videos down here so you can get some information about it!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=iWowJBRMtpc&quot;&gt;Getting Started With Jekyll&lt;/a&gt; &lt;br /&gt;
&lt;a href=&quot;https://www.youtube.com/watch?v=O7NBEFmA7yA&quot;&gt;Intro to Jekyll&lt;/a&gt; &lt;br /&gt;
And of course, the official &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; website.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks guys! I can’t wait to write more!&lt;/p&gt;

&lt;p&gt;– Mason&lt;/p&gt;
</description>
        <pubDate>Tue, 21 Jul 2015 00:00:00 -0400</pubDate>
      </item>
    
  </channel>
</rss>
